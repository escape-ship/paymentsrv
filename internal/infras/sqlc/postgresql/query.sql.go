// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgresql

import (
	"context"
	"database/sql"
)

const createKakao = `-- name: CreateKakao :one

INSERT INTO
    "paymentsrv".kakao (
        tid,
        status,
        partner_order_id,
        partner_user_id,
        item_name,
        quantity,
        total_amount,
        tax_free_amount,
        created_at,
        update_at
    )
VALUES ($1, 'READY', $2, $3, $4, $5, $6, $7, NOW(), NOW()) RETURNING tid
`

type CreateKakaoParams struct {
	Tid            string `json:"tid"`
	PartnerOrderID string `json:"partner_order_id"`
	PartnerUserID  string `json:"partner_user_id"`
	ItemName       string `json:"item_name"`
	Quantity       int32  `json:"quantity"`
	TotalAmount    int64  `json:"total_amount"`
	TaxFreeAmount  int64  `json:"tax_free_amount"`
}

func (q *Queries) CreateKakao(ctx context.Context, arg CreateKakaoParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createKakao,
		arg.Tid,
		arg.PartnerOrderID,
		arg.PartnerUserID,
		arg.ItemName,
		arg.Quantity,
		arg.TotalAmount,
		arg.TaxFreeAmount,
	)
	var tid string
	err := row.Scan(&tid)
	return tid, err
}

const getKakaoByOrderID = `-- name: GetKakaoByOrderID :one

SELECT
    tid, status, aid, partner_order_id, partner_user_id, item_name, quantity, total_amount, tax_free_amount, created_at, update_at, approved_at
FROM "paymentsrv".kakao
WHERE partner_order_id = $1
`

func (q *Queries) GetKakaoByOrderID(ctx context.Context, partnerOrderID string) (PaymentsrvKakao, error) {
	row := q.db.QueryRowContext(ctx, getKakaoByOrderID, partnerOrderID)
	var i PaymentsrvKakao
	err := row.Scan(
		&i.Tid,
		&i.Status,
		&i.Aid,
		&i.PartnerOrderID,
		&i.PartnerUserID,
		&i.ItemName,
		&i.Quantity,
		&i.TotalAmount,
		&i.TaxFreeAmount,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.ApprovedAt,
	)
	return i, err
}

const getKakaoByTID = `-- name: GetKakaoByTID :one

SELECT
    tid, status, aid, partner_order_id, partner_user_id, item_name, quantity, total_amount, tax_free_amount, created_at, update_at, approved_at
FROM "paymentsrv".kakao
WHERE tid = $1
`

func (q *Queries) GetKakaoByTID(ctx context.Context, tid string) (PaymentsrvKakao, error) {
	row := q.db.QueryRowContext(ctx, getKakaoByTID, tid)
	var i PaymentsrvKakao
	err := row.Scan(
		&i.Tid,
		&i.Status,
		&i.Aid,
		&i.PartnerOrderID,
		&i.PartnerUserID,
		&i.ItemName,
		&i.Quantity,
		&i.TotalAmount,
		&i.TaxFreeAmount,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.ApprovedAt,
	)
	return i, err
}

const updateKakaoApprove = `-- name: UpdateKakaoApprove :exec

UPDATE "paymentsrv".kakao
SET
    status = 'APPROVED',
    aid = $2,
    approved_at = $3,
    update_at = NOW()
WHERE tid = $1
`

type UpdateKakaoApproveParams struct {
	Tid        string         `json:"tid"`
	Aid        sql.NullString `json:"aid"`
	ApprovedAt sql.NullTime   `json:"approved_at"`
}

func (q *Queries) UpdateKakaoApprove(ctx context.Context, arg UpdateKakaoApproveParams) error {
	_, err := q.db.ExecContext(ctx, updateKakaoApprove, arg.Tid, arg.Aid, arg.ApprovedAt)
	return err
}

const updateKakaoStatus = `-- name: UpdateKakaoStatus :exec

UPDATE "paymentsrv".kakao
SET
    status = $1,
    update_at = NOW()
WHERE tid = $2
`

type UpdateKakaoStatusParams struct {
	Status string `json:"status"`
	Tid    string `json:"tid"`
}

func (q *Queries) UpdateKakaoStatus(ctx context.Context, arg UpdateKakaoStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateKakaoStatus, arg.Status, arg.Tid)
	return err
}
