// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgresql

import (
	"context"
)

const approveRequest = `-- name: ApproveRequest :exec

UPDATE "payments".payment
SET
    approved_at = NOW()
WHERE transaction_id = $1
`

func (q *Queries) ApproveRequest(ctx context.Context, transactionID string) error {
	_, err := q.db.ExecContext(ctx, approveRequest, transactionID)
	return err
}

const createRequest = `-- name: CreateRequest :one

INSERT INTO
    "payments".payment (
        transaction_id,
        status,
        order_id,
        user_id,
        item_name,
        item_quantity,
        total_amount,
        requested_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW()) RETURNING transaction_id, status, order_id, user_id, item_name, item_quantity, total_amount, requested_at, approved_at
`

type CreateRequestParams struct {
	TransactionID string `json:"transaction_id"`
	Status        string `json:"status"`
	OrderID       string `json:"order_id"`
	UserID        string `json:"user_id"`
	ItemName      string `json:"item_name"`
	ItemQuantity  int32  `json:"item_quantity"`
	TotalAmount   int32  `json:"total_amount"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (PaymentsPayment, error) {
	row := q.db.QueryRowContext(ctx, createRequest,
		arg.TransactionID,
		arg.Status,
		arg.OrderID,
		arg.UserID,
		arg.ItemName,
		arg.ItemQuantity,
		arg.TotalAmount,
	)
	var i PaymentsPayment
	err := row.Scan(
		&i.TransactionID,
		&i.Status,
		&i.OrderID,
		&i.UserID,
		&i.ItemName,
		&i.ItemQuantity,
		&i.TotalAmount,
		&i.RequestedAt,
		&i.ApprovedAt,
	)
	return i, err
}

const getRequestByOrderID = `-- name: GetRequestByOrderID :one

SELECT
    transaction_id,
    status,
    order_id,
    user_id,
    item_name,
    item_quantity,
    total_amount,
    requested_at,
    approved_at
FROM "payments".payment
WHERE order_id = $1
`

func (q *Queries) GetRequestByOrderID(ctx context.Context, orderID string) (PaymentsPayment, error) {
	row := q.db.QueryRowContext(ctx, getRequestByOrderID, orderID)
	var i PaymentsPayment
	err := row.Scan(
		&i.TransactionID,
		&i.Status,
		&i.OrderID,
		&i.UserID,
		&i.ItemName,
		&i.ItemQuantity,
		&i.TotalAmount,
		&i.RequestedAt,
		&i.ApprovedAt,
	)
	return i, err
}

const getRequestByTransactionID = `-- name: GetRequestByTransactionID :one

SELECT
    transaction_id,
    status,
    order_id,
    user_id,
    item_name,
    item_quantity,
    total_amount,
    requested_at,
    approved_at
FROM "payments".payment
WHERE transaction_id = $1
`

func (q *Queries) GetRequestByTransactionID(ctx context.Context, transactionID string) (PaymentsPayment, error) {
	row := q.db.QueryRowContext(ctx, getRequestByTransactionID, transactionID)
	var i PaymentsPayment
	err := row.Scan(
		&i.TransactionID,
		&i.Status,
		&i.OrderID,
		&i.UserID,
		&i.ItemName,
		&i.ItemQuantity,
		&i.TotalAmount,
		&i.RequestedAt,
		&i.ApprovedAt,
	)
	return i, err
}
