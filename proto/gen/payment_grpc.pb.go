// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: payment.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KakaoPaymentService_ReadyPayment_FullMethodName   = "/go.escape.ship.proto.paymentapi.KakaoPaymentService/ReadyPayment"
	KakaoPaymentService_ApprovePayment_FullMethodName = "/go.escape.ship.proto.paymentapi.KakaoPaymentService/ApprovePayment"
	KakaoPaymentService_CancelPayment_FullMethodName  = "/go.escape.ship.proto.paymentapi.KakaoPaymentService/CancelPayment"
)

// KakaoPaymentServiceClient is the client API for KakaoPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Kakao Payment Service
type KakaoPaymentServiceClient interface {
	ReadyPayment(ctx context.Context, in *ReadyPaymentKakaoRequest, opts ...grpc.CallOption) (*ReadyPaymentKakaoResponse, error)
	ApprovePayment(ctx context.Context, in *ApprovePaymentKakaoRequest, opts ...grpc.CallOption) (*ApprovePaymentKakaoResponse, error)
	CancelPayment(ctx context.Context, in *CancelPaymentKakaoRequest, opts ...grpc.CallOption) (*CancelPaymentKakaoResponse, error)
}

type kakaoPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKakaoPaymentServiceClient(cc grpc.ClientConnInterface) KakaoPaymentServiceClient {
	return &kakaoPaymentServiceClient{cc}
}

func (c *kakaoPaymentServiceClient) ReadyPayment(ctx context.Context, in *ReadyPaymentKakaoRequest, opts ...grpc.CallOption) (*ReadyPaymentKakaoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyPaymentKakaoResponse)
	err := c.cc.Invoke(ctx, KakaoPaymentService_ReadyPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kakaoPaymentServiceClient) ApprovePayment(ctx context.Context, in *ApprovePaymentKakaoRequest, opts ...grpc.CallOption) (*ApprovePaymentKakaoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApprovePaymentKakaoResponse)
	err := c.cc.Invoke(ctx, KakaoPaymentService_ApprovePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kakaoPaymentServiceClient) CancelPayment(ctx context.Context, in *CancelPaymentKakaoRequest, opts ...grpc.CallOption) (*CancelPaymentKakaoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPaymentKakaoResponse)
	err := c.cc.Invoke(ctx, KakaoPaymentService_CancelPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KakaoPaymentServiceServer is the server API for KakaoPaymentService service.
// All implementations must embed UnimplementedKakaoPaymentServiceServer
// for forward compatibility.
//
// Kakao Payment Service
type KakaoPaymentServiceServer interface {
	ReadyPayment(context.Context, *ReadyPaymentKakaoRequest) (*ReadyPaymentKakaoResponse, error)
	ApprovePayment(context.Context, *ApprovePaymentKakaoRequest) (*ApprovePaymentKakaoResponse, error)
	CancelPayment(context.Context, *CancelPaymentKakaoRequest) (*CancelPaymentKakaoResponse, error)
	mustEmbedUnimplementedKakaoPaymentServiceServer()
}

// UnimplementedKakaoPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKakaoPaymentServiceServer struct{}

func (UnimplementedKakaoPaymentServiceServer) ReadyPayment(context.Context, *ReadyPaymentKakaoRequest) (*ReadyPaymentKakaoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyPayment not implemented")
}
func (UnimplementedKakaoPaymentServiceServer) ApprovePayment(context.Context, *ApprovePaymentKakaoRequest) (*ApprovePaymentKakaoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePayment not implemented")
}
func (UnimplementedKakaoPaymentServiceServer) CancelPayment(context.Context, *CancelPaymentKakaoRequest) (*CancelPaymentKakaoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayment not implemented")
}
func (UnimplementedKakaoPaymentServiceServer) mustEmbedUnimplementedKakaoPaymentServiceServer() {}
func (UnimplementedKakaoPaymentServiceServer) testEmbeddedByValue()                             {}

// UnsafeKakaoPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KakaoPaymentServiceServer will
// result in compilation errors.
type UnsafeKakaoPaymentServiceServer interface {
	mustEmbedUnimplementedKakaoPaymentServiceServer()
}

func RegisterKakaoPaymentServiceServer(s grpc.ServiceRegistrar, srv KakaoPaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedKakaoPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KakaoPaymentService_ServiceDesc, srv)
}

func _KakaoPaymentService_ReadyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyPaymentKakaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakaoPaymentServiceServer).ReadyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KakaoPaymentService_ReadyPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakaoPaymentServiceServer).ReadyPayment(ctx, req.(*ReadyPaymentKakaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KakaoPaymentService_ApprovePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovePaymentKakaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakaoPaymentServiceServer).ApprovePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KakaoPaymentService_ApprovePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakaoPaymentServiceServer).ApprovePayment(ctx, req.(*ApprovePaymentKakaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KakaoPaymentService_CancelPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPaymentKakaoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KakaoPaymentServiceServer).CancelPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KakaoPaymentService_CancelPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KakaoPaymentServiceServer).CancelPayment(ctx, req.(*CancelPaymentKakaoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KakaoPaymentService_ServiceDesc is the grpc.ServiceDesc for KakaoPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KakaoPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.escape.ship.proto.paymentapi.KakaoPaymentService",
	HandlerType: (*KakaoPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadyPayment",
			Handler:    _KakaoPaymentService_ReadyPayment_Handler,
		},
		{
			MethodName: "ApprovePayment",
			Handler:    _KakaoPaymentService_ApprovePayment_Handler,
		},
		{
			MethodName: "CancelPayment",
			Handler:    _KakaoPaymentService_CancelPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
